name: Build and Push Image to ECR

on:
    push:
        branches: [ "main" ]
    pull_request:
        branches: [ "main" ]

env:
  ECR_REGISTRY: ${{ secrets.ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
  ECR_REPOSITORY: makirepo
  GIT_TAG: ${{ github.sha }}
  LATEST: latest
  CLUSTER_NAME: makicluster

permissions:
    contents: read    # Required for OIDC authentication
    id-token: write   # Required for AWS authentication

jobs:
  docker-build-push:
    name: docker-build-push
    runs-on: ubuntu-22.04
    outputs:
      image: ${{ steps.build-image.outputs.IMAGE }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_ID }}:role/${{ secrets.ROLE_NAME }}
          role-session-name: github_action_session
          role-duration-seconds: 900
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push the tagged docker image to Amazon ECR
        id: build-image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$GIT_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$GIT_TAG
          echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$GIT_TAG" >> "$GITHUB_OUTPUT"

  deploy-services:
    needs: docker-build-push
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        service:
          - name: makifaa-api-service
            task-definition-name: makifaa-api
            container-name: makicontainer
            ecs-service: makifaa-api-service
          - name: makifaa-worker
            task-definition-name: makifaa-worker
            container-name: makicontainer
            ecs-service: makiservice

    name: Deploy ${{ matrix.service.name }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_ID }}:role/${{ secrets.ROLE_NAME }}
          role-session-name: github_action_session
          role-duration-seconds: 900
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download Environment Variable file and Upload to S3
        run: |
          sudo apt update -y
          sudo apt install awscli jq -y
          chmod +x get_env.sh
          bash get_env.sh
          # Upload .env file to S3
          aws s3 cp .env s3://${{ secrets.S3_ENV_BUCKET }}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ matrix.service.task-definition-name }} --query taskDefinition > task-definition.json
        shell: bash

      - name: Construct full image path
        id: image-path
        run: |
          echo "FULL_IMAGE_PATH=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.GIT_TAG }}" >> "$GITHUB_OUTPUT"

      - name: Render Amazon ECS task definition
        id: render-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ matrix.service.container-name }}
          image: ${{ steps.image-path.outputs.FULL_IMAGE_PATH }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-definition.outputs.task-definition }}
          service: ${{ matrix.service.ecs-service }}
          cluster: ${{ env.CLUSTER_NAME }}
          wait-for-service-stability: true