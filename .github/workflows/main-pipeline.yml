name: Build and Push Image to ECR

on:
    push:
        branches: [ "staging" ]
    pull_request:
        branches: [ "staging" ]

env:
    AWS_REGION: eu-west-1   # Ireland region
    ECR_REPOSITORY: makifaa/staging
    S3_ENV_BUCKET: ${{ secrets.S3_ENV_BUCKET }}
   # ECR_REGISTRY: ${{ secrets.ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

permissions:
    contents: read    # Required for OIDC authentication
    id-token: write   # Required for AWS authentication

jobs:
    build:
        name: Build and Push
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_ID }}:role/${{ secrets.ROLE_NAME }}
                  role-duration-seconds: 1200
                  aws-region: ${{ env.AWS_REGION }}

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2
              
            - name: Build, tag, and push image to Amazon ECR
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  IMAGE_TAG: ${{ github.sha }}
              run: |
                  IMAGE_TAG=dev-$(echo $IMAGE_TAG | cut -c 1-8)
                  docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

                
            - name: Download and Upload Environment Variable file to S3
              run: |
                  sudo apt update -y
                  sudo apt install awscli jq -y
                  # Download .env file
                  chmod +x get_env.sh
                  bash get_env.sh
                  # Upload .env file to S3
                  aws s3 cp .env s3://${{ env.S3_ENV_BUCKET }}
                
            - name: Download API task definition
              id: download-api-taskdef
              run: |
                aws ecs describe-task-definition \
                    --task-definition ${{ secrets.ECS_TASK_DEFINITION_FAMILY }} \
                    --query taskDefinition > task-definition.json

            - name: Download Worker task definition
              id: download-worker-taskdef
              run: |
                aws ecs describe-task-definition \
                    --task-definition ${{ secrets.WORKER_TASK_DEFINITION_FAMILY }} \
                    --query taskDefinition > worker-task-definition.json

            - name: Update API task definition
              uses: aws-actions/amazon-ecs-render-task-definition@v1
              id: render-api-taskdef
              with:
                task-definition: task-definition.json
                container-name: ${{ secrets.CONTAINER_NAME }}
                image: ${{ github.event.inputs.image_uri }}

            - name: Update Worker task definition
              uses: aws-actions/amazon-ecs-render-task-definition@v1
              id: render-worker-taskdef
              with:
                task-definition: worker-task-definition.json
                container-name: ${{ secrets.WORKER_CONTAINER_NAME }}
                image: ${{ github.event.inputs.image_uri }}

            - name: Deploy API to ECS
              uses: aws-actions/amazon-ecs-deploy-task-definition@v1
              with:
                task-definition: ${{ steps.render-api-taskdef.outputs.task-definition }}
                service: ${{ secrets.ECS_SERVICE }}
                cluster: ${{ secrets.ECS_CLUSTER }}
                wait-for-service-stability: true
                wait-for-service-stability-timeout: 600
                force-new-deployment: true

            - name: Deploy Worker to ECS
              uses: aws-actions/amazon-ecs-deploy-task-definition@v1
              with:
                task-definition: ${{ steps.render-worker-taskdef.outputs.task-definition }}
                service: ${{ secrets.WORKER_ECS_SERVICE }}
                cluster: ${{ secrets.ECS_CLUSTER }}
                wait-for-service-stability: true
                wait-for-service-stability-timeout: 600
                force-new-deployment: true

            - name: Verify deployments
              run: |
                echo "Verifying API service deployment..."
                aws ecs describe-services \
                    --cluster ${{ secrets.ECS_CLUSTER }} \
                    --services ${{ secrets.ECS_SERVICE }} \
                    --query 'services[0].deployments[0].status'

                echo "Verifying Worker service deployment..."
                aws ecs describe-services \
                    --cluster ${{ secrets.ECS_CLUSTER }} \
                    --services ${{ secrets.WORKER_ECS_SERVICE }} \
                    --query 'services[0].deployments[0].status'